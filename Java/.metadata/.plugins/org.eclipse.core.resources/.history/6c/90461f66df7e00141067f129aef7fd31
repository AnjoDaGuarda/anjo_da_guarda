package AnjoDaGuarda;

import gnu.io.CommPortIdentifier;
import gnu.io.SerialPort;
import gnu.io.SerialPortEvent;
import gnu.io.SerialPortEventListener;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.Enumeration;

import metodo_de_envio.Metodo;
import metodo_de_envio.TransferenciaSMS;

public class AnjoDaGuarda implements SerialPortEventListener {

	private SerialPort serialPort;
	private static final String PORT_NAMES[] = { "/dev/tty.usbmodem1411", // Mac
			// OS
			// X
			"/dev/ttyACM0", // Raspberry Pi
			"/dev/ttyUSB0", // Linux
			"COM3", // Windows
	};
	private BufferedReader input;
	private OutputStream output;
	private static final int TIME_OUT = 2000;
	private static final int DATA_RATE = 9600;
	private Metodo metodo = new TransferenciaSMS();
	private static String typeMethod;
	public String oldInputLine = null;

	public void initialize() {
		// System.setProperty("gnu.io.rxtx.SerialPorts",
		// "/dev/tty.usbmodem1411");
		CommPortIdentifier portId = null;
		Enumeration portEnum = CommPortIdentifier.getPortIdentifiers();
		// First, Find an instance of serial port as set in PORT_NAMES.
		while (portEnum.hasMoreElements()) {
			CommPortIdentifier currPortId = (CommPortIdentifier) portEnum
					.nextElement();
			for (String portName : PORT_NAMES) {
				if (currPortId.getName().equals(portName)) {
					portId = currPortId;
					break;
				}
			}
		}
		if (portId == null) {
			System.out.println("Porta serial n√£o encontrada.");
			return;
		}
		try {
			// open serial port, and use class name for the appName.
			serialPort = (SerialPort) portId.open(this.getClass().getName(),
					TIME_OUT);
			// set port parameters
			serialPort.setSerialPortParams(DATA_RATE, SerialPort.DATABITS_8,
					SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);
			// open the streams
			input = new BufferedReader(new InputStreamReader(
					serialPort.getInputStream()));
			output = serialPort.getOutputStream();
			// add event listeners
			serialPort.addEventListener(this);
			serialPort.notifyOnDataAvailable(true);
		} catch (Exception e) {
			System.err.println(e.toString());
			e.printStackTrace();
		}
	}

	public synchronized void close() {
		if (serialPort != null) {
			serialPort.removeEventListener();
			serialPort.close();
		}
	}

	/**
	 * Pega o dado do arduino e faz as acoes necessarias
	 */

	public synchronized void serialEvent(SerialPortEvent oEvent) {
		if (oEvent.getEventType() == SerialPortEvent.DATA_AVAILABLE) {
			String inputLine;
			try {

				inputLine = input.readLine();
				System.out.println(inputLine);
				sendInfoByMethods(inputLine);

			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}
		// Ignore all the other eventTypes, but you should consider the other
		// ones.
	}

	public void setMetodo(Metodo metodo) {
		this.metodo = metodo;
	}

	public void sendInfoByMethods(String inputLine) {
if (oldInputLine.equals(arg0null) || !inputLine.equals(anObjectoldInputLine)){
		metodo.actionByString(inputLine);
		// Adicionar outroes metodos
	}
	}
}
